---
layout: "post"
title: "Django网站开发全记录：环境搭建、创建项目"
date: "2021-03-06 08:55"
---


# 环境搭建与工具安装
完整步骤参考：https://stormsha.com/article/2026/
## 虚拟环境和安装包：Virtualenv和django

```bash
pip install virtualenv, virtualenvwrapper-win
cd D:/project
mkvirtualenv webdev
workon webdev
pip install django
pip install psycopg2
pip list
pip freeze
deactivate
```

## 数据库：PostgreSQL

Django支持四种数据库：

1. PostgreSQL (http://www.postgresql.org/)
2. SQLite 3 (http://www.sqlite.org/)
3. MySQL (http://www.mysql.com/)
4. Oracle (http://www.oracle.com/)

PostgreSQL比起MySQL更适合于Django，两者皆开源免费，在此我选择django。Django的创建者都推荐PostgreSQL：

>如果您不受任何遗留系统的束缚，并且可以自由选择数据库后端，那么我们建议您使用PostgreSQL，它可以在成本，功能，速度和稳定性之间取得很好的平衡。（《 Django权威指南》第15页）

完整步骤参考：https://www.runoob.com/postgresql/windows-install-postgresql.html

打开后设置语言为中文。

## 开始一个项目

```
django-admin startproject mysite
```

创建一个project，它是一系列设置的集合，包括数据库配置、应用程序的特定设置、Django 特定选项。

## 初始化设置工作
新建一个工作目录（文档根目录之外），例如 /home/username/djcode/ ，然后进入该目录。

转到你创建的目录，运行命令django-admin.py startproject mysite。这样会在你的当前目录下创建一个目录mysite。

```
mysite/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        asgi.py
        wsgi.py
```

> 文件如下：
>
> __init__.py ：让 Python 把该目录当成一个开发包 (即一组模块)所需的文件。 这是一个空文件，一般你不需要修改它。
>
> manage.py ：一种命令行工具，允许你以多种方式与该 Django 项目进行交互。 键入python manage.py help，看一下它能做什么。 你应当不需要编辑这个文件；在这个目录下生成它纯是为了方便。
>
> settings.py ：该 Django 项目的设置或配置。 查看并理解这个文件中可用的设置类型及其默认值。
>
> urls.py：Django项目的URL设置。 可视其为你的django网站的目录。 目前，它是空的。

运行一下django开发服务器看看我们的准系统。开发服务器监测你的代码并自动加载它，这样你会很容易修改代码而不用重启动服务。

启动服务器
```
python manage.py runserver
```
通过指定一个 IP 地址，你可以告诉服务器–允许非本地连接访问。 如果你想和其他开发人员共享同一开发站点的话，该功能特别有用。 `` 0.0.0.0`` 这个 IP 地址，告诉服务器去侦听任意的网络接口。

```
python manage.py runserver 0.0.0.0:8000
```

使用Windows的用户，请尝试使用 ipconfig 命令。来决定你在本地网络中的IP 地址.完成这些设置后，你本地网络中的其它计算机就可以在浏览器中访问你的 IP 地址了。比如： http://192.168.1.103:8000/ .

# 开始第一个视图
在上一章使用django-admin.py startproject制作的mysite文件夹中，创建一个叫做views.py的空文件。
你需要输入到views.py文件：
```
from django.http import HttpResponse

def hello(request):
    return HttpResponse("Hello world")
```
这个函数只有简单的一行代码： 它仅仅返回一个HttpResponse对象，这个对象包含了文本“Hello world”。

一个视图就是Python的一个函数。这个函数第一个参数的类型是HttpRequest；它返回一个HttpResponse实例。

我们需要通过一个详细描述的URL来显式的激活这个视图。 （继续我们刚才类似发布静态HTML文件的例子。现在我们已经创建了HTML文件，但还没有把它上传至服务器的目录。）为了绑定视图函数和URL，我们使用URLconf。

URLconf ( urls.py ) 就像是 Django 所支撑网站的目录。 它的本质是 URL 模式以及要为该 URL 模式调用的视图函数之间的映射表。 你就是以这种方式告诉 Django，对于这个 URL 调用这段代码，对于那个 URL 调用那段代码。 例如，当用户访问/foo/时，调用视图函数foo_view()，这个视图函数存在于Python模块文件view.py中。

                urls.py     view.py
/foo/                       foo_view()
URL 模式   --   URLconf --> 视图函数
